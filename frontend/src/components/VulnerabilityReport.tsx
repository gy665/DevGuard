import React from 'react';
import { Typography, Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Chip, Link, ChipProps } from '@mui/material';

// --- (This component is a placeholder for now) ---
// We'll use the component's own empty state as the placeholder.
// This allows the app to render without needing live data yet.

const VulnerabilityReport: React.FC = () => {
    return (
        <Paper 
          className="bg-slate-800 border border-slate-700"
          sx={{ 
            p: 4, 
            textAlign: 'center', 
            height: '100%', 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'center',
            backgroundColor: 'transparent', // Ensure it uses Tailwind bg
            boxShadow: 'none', // Remove MUI shadow
          }}
        >
            <Typography variant="h6" className="text-slate-400">
                Select a project to view its vulnerability report.
            </Typography>
        </Paper>
    );
};


// --- FULL CODE (TO BE USED LATER) ---
/* 
// When you have scan data, replace the placeholder above with this full version.

// 1. Define the possible severity levels for type safety.
type Severity = 'Critical' | 'High' | 'Medium' | 'Low';

// 2. Define the shape of a single project and a single vulnerability.
interface Project {
  name: string;
}

interface Vulnerability {
  id: string | number;
  severity: Severity;
  name: string; // Package name
  version: string; // Vulnerable version
  description: string;
  detailsUrl: string;
}

// 3. Define the props for the component.
interface VulnerabilityReportProps {
  project: Project | null;
  vulnerabilities: Vulnerability[];
}

// 4. Create a typed map for severity colors to ensure we only use valid keys.
const severityColors: Record<Severity, ChipProps['color']> = {
  'Critical': 'error',
  'High': 'warning',
  'Medium': 'info',
  'Low': 'success'
};

const VulnerabilityReport: React.FC<VulnerabilityReportProps> = ({ project, vulnerabilities }) => {
  if (!project) {
    return (
      <Paper sx={{ p: 4, textAlign: 'center', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <Typography variant="h6" color="text.secondary">
          Select a project on the left to view its vulnerability report.
        </Typography>
      </Paper>
    );
  }

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        {project.name}
      </Typography>

      <TableContainer component={Paper}>
        <Table sx={{ minWidth: 650 }}>
          <TableHead>
            <TableRow>
              <TableCell>Severity</TableCell>
              <TableCell>Package Name</TableCell>
              <TableCell>Vulnerable Version</TableCell>
              <TableCell>Description</TableCell>
              <TableCell>Details</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {vulnerabilities.length > 0 ? vulnerabilities.map((vuln) => (
              <TableRow key={vuln.id} hover>
                <TableCell><Chip label={vuln.severity} color={severityColors[vuln.severity]} size="small" /></TableCell>
                <TableCell>{vuln.name}</TableCell>
                <TableCell>{vuln.version}</TableCell>
                <TableCell>{vuln.description}</TableCell>
                <TableCell><Link href={vuln.detailsUrl} target="_blank">More Info</Link></TableCell>
              </TableRow>
            )) : (
              <TableRow>
                <TableCell colSpan={5} align="center">
                  <Typography sx={{ p: 2 }}>No vulnerabilities found!</Typography>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
};
*/

export default VulnerabilityReport;