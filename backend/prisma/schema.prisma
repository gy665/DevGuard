// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums for controlled vocabularies ---
enum AssetType {
  REPOSITORY
  FILE
  CONTAINER
}

enum ScanStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

// --- Data Models ---

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String // We will store a hashed password here
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  scannedAssets ScannedAsset[]
}

model ScannedAsset {
  id        String    @id @default(cuid())
  name      String // e.g., "nginx:latest" or "https://github.com/user/repo.git"
  type      AssetType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  scans Scan[]
}

model Scan {
  id         String     @id @default(cuid())
  status     ScanStatus @default(PENDING)
  createdAt  DateTime   @default(now())
  finishedAt DateTime?

  asset   ScannedAsset @relation(fields: [assetId], references: [id])
  assetId String

  vulnerabilities Vulnerability[]
}

model Vulnerability {
  id               String @id @default(cuid())
  vulnerabilityId  String // e.g., "CVE-2023-12345"
  packageName      String
  severity         String // e.g., "CRITICAL", "HIGH", "MEDIUM", "LOW"
  installedVersion String
  fixedInVersion   String?
  description      String? @db.Text

  scan   Scan   @relation(fields: [scanId], references: [id])
  scanId String
}
